# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Unicorn Properties Services - web interface. Add, list and get details for Unicorn Properties.

######################################
# PARAMETERS
######################################
Parameters:
  Stage:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Prod
      - Local
  WebServiceNamespace:
    Type: String
    Default: "unicorn.web"
    AllowedValues:
      - "unicorn.web"


######################################
# CONDITIONS
######################################   
Conditions:
  IsProd: !Equals 
    - !Ref Stage
    - Prod

######################################
# METADATA
######################################
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - ES1007
        - ES6000
        - I3042

######################################
# MAPPINGS
######################################   
Mappings:
  LogsRetentionPeriodMap:
    Local:
      Days: 3
    Dev:
      Days: 3
    Prod:
      Days: 14

######################################
# GLOBALS
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
######################################
Globals:
  Function:
    Runtime: nodejs18.x
    MemorySize: 128
    Timeout: 120
    Tracing: Active
    Architectures:
      - x86_64
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref WebTable
        SERVICE_NAMESPACE: !Ref WebServiceNamespace
        POWERTOOLS_SERVICE_NAME: !Ref WebServiceNamespace
        POWERTOOLS_TRACE_DISABLED: "false"                                                            # Explicitly disables tracing, default
        POWERTOOLS_LOGGER_LOG_EVENT: !If [IsProd, "false", "true"]                                    # Logs incoming event, default
        POWERTOOLS_LOGGER_SAMPLE_RATE: !If [IsProd, "0.1", "0"]                                       # Debug log sampling percentage, default
        POWERTOOLS_METRICS_NAMESPACE: !Ref WebServiceNamespace
    Tags:
      stage: !Ref Stage
      project: AWS Serverless Developer Experience
      service: Unicorn Web Service

######################################
# RESOURCES
######################################
Resources:
  ######################################
  # LAMBDA FUNCTIONS
  ######################################
  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: propertySearchFunction.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref WebTable
      Events:
        ListPropertiesByCity:
          Type: Api
          Properties:
            Path: /search/{country}/{city}
            Method: get
            RestApiId: !Ref WebApi
        ListPropertiesByStreet:
          Type: Api
          Properties:
            Path: /search/{country}/{city}/{street}
            Method: get
            RestApiId: !Ref WebApi
        PropertyDetails:
          Type: Api
          Properties:
            Path: /properties/{country}/{city}/{street}/{number}
            Method: get
            RestApiId: !Ref WebApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
          - src/search_service/propertySearchFunction.ts

  RequestApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: requestApprovalFunction.lambdaHandler
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref UnicornWebEventBus
        - DynamoDBReadPolicy:
            TableName: !Ref WebTable
        - DynamoDBWritePolicy:
            TableName: !Ref WebTable
      Events:
        AddProperty:
          Type: Api
          Properties:
            Path: /request_approval
            Method: post
            RestApiId: !Ref WebApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
          - src/approvals_service/requestApprovalFunction.ts

  PublicationApprovedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: publicationApprovedEventHandler.lambdaHandler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref WebTable
      Events:
        ApprovalEvent:
          Type: EventBridgeRule
          Properties:
            RuleName: web.publication_approved-properties.pub_eval_completed
            EventBusName: !Ref UnicornWebEventBus
            Pattern:
              source:
                - !Sub "TODO"
              detail-type:
                - PublicationEvaluationCompleted
            RetryPolicy:
              MaximumRetryAttempts: 5
              MaximumEventAgeInSeconds: 900
            DeadLetterConfig:
              Arn: !GetAtt WebEventBusRuleDLQ.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
          - src/approvals_service/publicationApprovedEventHandler.ts

  ######################################
  # DLQs
  ######################################
  WebEventBusRuleDLQ:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      Tags:
        - Key: project
          Value: AWS Serverless Developer Experience
        - Key: service
          Value: !Ref WebServiceNamespace
        - Key: stage
          Value: !Ref Stage

  ######################################
  # API
  ######################################
  WebApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      MethodSettings:
        - MetricsEnabled: true
          ResourcePath: /*
          HttpMethod: '*'
          LoggingLevel: !If 
            - IsProd
            - ERROR
            - INFO
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 100
      AccessLogSetting:
        DestinationArn: !GetAtt WebApiLogGroup.Arn
        Format: >
          {"requestId":"$context.requestId",
          "integration-error":"$context.integration.error",
          "integration-status":"$context.integration.status",
          "integration-latency":"$context.integration.latency",
          "integration-requestId":"$context.integration.requestId",
          "integration-integrationStatus":"$context.integration.integrationStatus",
          "response-latency":"$context.responseLatency",
          "status":"$context.status"}
      DefinitionBody:
        "Fn::Transform":
          Name: 'AWS::Include'
          Parameters:
            Location: './api.yaml'
      Tags:
        stage: !Ref Stage
        project: AWS Serverless Developer Experience
        service: Unicorn Web Service
  # API GW Cloudwatch Log Group
  WebApiLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: !FindInMap
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

  # API GW IAM roles 
  WebApiIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: apigateway.amazonaws.com
      Policies:
        - PolicyName: AllowSqsIntegration
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueUrl'
                Resource: !GetAtt WebServiceIngestQueue.Arn

  #### INGEST QUEUES
  WebServiceIngestQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      QueueName: !Sub WebServiceIngestQueue-${Stage}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WebServiceIngestDLQ.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 20
      Tags:
        - Key: stage
          Value: !Ref Stage
        - Key: project
          Value: AWS Serverless Developer Experience
        - Key: namespace
          Value: !Ref WebServiceNamespace
  WebServiceIngestDLQ:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      QueueName: !Sub WebServiceIngestDLQ-${Stage}
      Tags:
        - Key: stage
          Value: !Ref Stage
        - Key: project
          Value: AWS Serverless Developer Experience
        - Key: namespace
          Value: !Ref WebServiceNamespace
  
  ######################################
  # DYNAMODB TABLE
  ######################################
  WebTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  #### EVENT BUS
  # Event bus for Web Service used to publish and consume events
  UnicornWebEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub UnicornWebBus-${Stage}

  # Event bus policy to restrict who can publish events (should only be services from WebsServiceNamespace)
  WebEventsBusPublishPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref UnicornWebEventBus
      StatementId: !Sub WebPublishEventsPolicy-${Stage}
      Statement:
        Effect: Allow
        Principal:
          AWS:
            - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
        Action: events:PutEvents
        Resource: !GetAtt UnicornWebEventBus.Arn
        Condition:
          StringEquals:
            events:source:
              - !Ref WebServiceNamespace


  ######################################
  # CLOUDWATCH LOG GROUPS
  ######################################
  WebApiLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: !FindInMap 
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

  SearchFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SearchFunction}"
      RetentionInDays: !FindInMap 
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

  RequestApprovalFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${RequestApprovalFunction}"
      RetentionInDays: !FindInMap 
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

  PublicationApprovedFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PublicationApprovedFunction}"
      RetentionInDays: !FindInMap 
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

######################################
# OUTPUTS
######################################
Outputs:
  SearchPropertiesByCity:
    Description: "GET request to list all properties in a given city"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/search/{country}/{city}"

  SearchPropertiesByStreet:
    Description: "GET request to list all properties in a given street"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/search/{country}/{city}/{street}"

  PropertyApproval:
    Description: "POST request to add a property to the database"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/request_approval"

  PropertyDetails:
    Description: "GET request to get the full details of a single property"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/properties/{country}/{city}/{street}/{number}"

  IsProd:
    Description: Is Production?
    Value: !If 
      - IsProd
      - "true"
      - "false"

  WebTableName:
    Description: Name of the DynamoDB Table for Unicorn Web
    Value: !Ref WebTable

  ApiUrl:
    Description: Web service API endpoint
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/"

  BaseUrl:
    Description: Web service API endpoint
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
