# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Transform: 
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31
Description: >
  Unicorn Properties Services - web interface. Add, list and get details for Unicorn Properties.

#### METADATA
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - ES1007
        - ES6000
        - I3042

#### PARAMETERS
Parameters:
  Stage:
    Type: String
    Default: Local
    AllowedValues:
      - Local
      - Dev
      - Prod

#### MAPPINGS
Mappings:
  LogsRetentionPeriodMap:
    Local:
      Days: 3
    Dev:
      Days: 3
    Prod:
      Days: 14
  Constants:
    ServiceNamespace:
      Value: "unicorn.web"
    ProjectName:
      Value: "AWS Serverless Developer Experience"

#### CONDITIONS
Conditions:
  IsProd: !Equals
    - !Ref Stage
    - Prod

#### GLOBALS
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: nodejs18.x
    MemorySize: 128
    Timeout: 60
    Tracing: Active
    Architectures:
      - x86_64
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref WebTable
        EVENT_BUS: !Ref UnicornWebEventBus
        SERVICE_NAMESPACE: !FindInMap [Constants, ServiceNamespace, Value]
        POWERTOOLS_SERVICE_NAME: !FindInMap [Constants, ServiceNamespace, Value]
        POWERTOOLS_TRACE_DISABLED: "false" # Explicitly disables tracing, default
        POWERTOOLS_LOGGER_LOG_EVENT: !If [IsProd, "false", "true"] # Logs incoming event, default
        POWERTOOLS_LOGGER_SAMPLE_RATE: !If [IsProd, "0.1", "0"] # Debug log sampling percentage, default
        POWERTOOLS_METRICS_NAMESPACE: !FindInMap [Constants, ServiceNamespace, Value]
        POWERTOOLS_LOG_LEVEL: INFO # Log level for Logger (INFO, DEBUG, etc.), default
    Tags:
      stage: !Ref Stage
      project: !FindInMap [Constants, ProjectName, Value]
      namespace: !FindInMap [Constants, ServiceNamespace, Value]

##### RESOURCES
Resources:
  #### SSM PARAMETERS
  # Services own and share their namespace
  UnicornWebNamespaceParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/UnicornWebNamespace
      Value: !FindInMap [Constants, ServiceNamespace, Value]

  # Services share their event bus name and arn
  UnicornWebEventBusParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/UnicornWebEventBus
      Value: !GetAtt UnicornWebEventBus.Name

  UnicornWebEventBusArnParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/UnicornWebEventBusArn
      Value: !GetAtt UnicornWebEventBus.Arn

  ##### LAMBDA FUNCTIONS
  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: propertySearchFunction.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref WebTable
      Events:
        ListPropertiesByCity:
          Type: Api
          Properties:
            Path: /search/{country}/{city}
            Method: get
            RestApiId:
              Ref: UnicornWebApi
        ListPropertiesByStreet:
          Type: Api
          Properties:
            Path: /search/{country}/{city}/{street}
            Method: get
            RestApiId:
              Ref: UnicornWebApi
        PropertyDetails:
          Type: Api
          Properties:
            Path: /properties/{country}/{city}/{street}/{number}
            Method: get
            RestApiId:
              Ref: UnicornWebApi

  SearchFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SearchFunction}"
      RetentionInDays: !FindInMap
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

  RequestApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: requestApprovalFunction.lambdaHandler
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref UnicornWebEventBus
        - DynamoDBReadPolicy:
            TableName: !Ref WebTable
        - DynamoDBWritePolicy:
            TableName: !Ref WebTable
      Events:
        AddProperty:
          Type: Api
          Properties:
            Path: /request_approval
            Method: post
            RestApiId:
              Ref: UnicornWebApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
          - src/approvals_service/requestApprovalFunction.ts

  RequestApprovalFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${RequestApprovalFunction}"
      RetentionInDays: !FindInMap
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

  PublicationApprovedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: publicationApprovedEventHandler.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref WebTable
        - DynamoDBWritePolicy:
            TableName: !Ref WebTable
      Events:
        ApprovalEvent:
          Type: EventBridgeRule
          Properties:
            RuleName: web.publicationapproved-properties.pubevalcompleted
            EventBusName: !Ref UnicornWebEventBus
            Pattern:
              source:
                - !Ref UnicornWebEventBus
              detail-type:
                - PublicationEvaluationCompleted
            RetryPolicy:
              MaximumRetryAttempts: 5
              MaximumEventAgeInSeconds: 900
            DeadLetterConfig:
              Arn: !GetAtt UnicornWebEventBusDLQ.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
          - src/approvals_service/publicationApprovedEventHandler.ts

  PublicationApprovedFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PublicationApprovedFunction}"
      RetentionInDays: !FindInMap
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

  #### API GATEWAY REST API
  UnicornWebApi:
    Type: AWS::Serverless::Api
    DependsOn: UnicornWebApiGwAccountConfig
    Properties:
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      MethodSettings:
        - MetricsEnabled: true
          ResourcePath: /*
          HttpMethod: "*"
          LoggingLevel: !If
            - IsProd
            - ERROR
            - INFO
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 100
      AccessLogSetting:
        DestinationArn: !GetAtt UnicornWebApiLogGroup.Arn
        Format: !ToJsonString
          requestId: $context.requestId
          integration-error: $context.integration.error
          integration-status: $context.integration.status
          integration-latency: $context.integration.latency
          integration-requestId: $context.integration.requestId
          integration-integrationStatus: $context.integration.integrationStatus
          response-latency: $context.responseLatency
          status: $context.status
      DefinitionBody: !Transform
        Name: "AWS::Include"
        Parameters:
          Location: "./api.yaml"
      Tags:
        stage: !Ref Stage
        project: !FindInMap [Constants, ProjectName, Value]
        namespace: Unicorn Web Service

  UnicornWebApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt UnicornWebApiGwAccountConfigRole.Arn

  # API GW IAM roles
  UnicornWebApiGwAccountConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # API GW IAM roles 
  UnicornWebApiIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: apigateway.amazonaws.com
      Policies:
        - PolicyName: AllowSqsIntegration
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueUrl'
                Resource: !GetAtt UnicornWebIngestQueue.Arn
        - PolicyName: AllowLambdaInvocation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt SearchFunction.Arn

  # API GW Cloudwatch Log Group
  UnicornWebApiLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: !FindInMap
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

  #### INGEST QUEUES
  UnicornWebIngestQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      QueueName: !Sub UnicornWebIngestQueue-${Stage}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UnicornWebIngestDLQ.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 20
      Tags:
        - Key: stage
          Value: !Ref Stage
        - Key: project
          Value: !FindInMap [Constants, ProjectName, Value]
        - Key: namespace
          Value: !FindInMap [Constants, ServiceNamespace, Value]

  UnicornWebIngestDLQ:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      QueueName: !Sub UnicornWebIngestDLQ-${Stage}
      Tags:
        - Key: stage
          Value: !Ref Stage
        - Key: project
          Value: !FindInMap [Constants, ProjectName, Value]
        - Key: namespace
          Value: !FindInMap [Constants, ServiceNamespace, Value]

  ##### DYNAMODB
  WebTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: project
          Value: !FindInMap [Constants, ProjectName, Value]
        - Key: namespace
          Value: !FindInMap [Constants, ServiceNamespace, Value]
        - Key: stage
          Value: !Ref Stage
  #### EVENT BUS

  # Event bus for Properties Web used to publish and consume events
  UnicornWebEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub UnicornWebBus-${Stage}

  # Event bus policy to restrict who can publish events (should only be services from WebServiceNamespace)
  UnicornWebEventBusPublishPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref UnicornWebEventBus
      StatementId: !Sub WebPublishEventsPolicy-${Stage}
      Statement:
        Effect: Allow
        Principal:
          AWS:
            - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
        Action: events:PutEvents
        Resource: !GetAtt UnicornWebEventBus.Arn
        Condition:
          StringEquals:
            events:source:
              - !FindInMap [Constants, ServiceNamespace, Value]

  # Event bus policy to restrict who can create rules on the event bus to subscribe to events published by the Contracts Service.
  # Update this policy as you get new subscribers by adding their namespace to events:source
  # PropertiesServiceRulePolicy:
  #   Type: "AWS::Events::EventBusPolicy"
  #   Properties:
  #     EventBusName: !Ref UnicornWebEventBus
  #     StatementId: !Sub CreateRulePolicy-${Stage}
  #     Statement:
  #       Effect: Allow
  #       Principal:
  #         AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
  #       Action:
  #         - "events:PutRule"
  #         - "events:DeleteRule"
  #         - "events:DescribeRule"
  #         - "events:DisableRule"
  #         - "events:EnableRule"
  #         - "events:PutTargets"
  #         - "events:RemoveTargets"
  #       Resource:
  #         - !Sub >-
  #           arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${UnicornWebEventBus.Name}/*
  #       Condition:
  #         StringEqualsIfExists:
  #           "events:creatorAccount": "${aws:PrincipalAccount}"
  #         StringEquals:
  #           "events:source":
  #             - !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornPropertiesNamespace}}"
  #         "Null":
  #           "events:source": "false"

  # Catchall rule used for development purposes.

  UnicornWebCatchAllRule:
    Type: AWS::Events::Rule
    Properties:
      Name: contracts.catchall
      Description: Catch all events published by the web service.
      EventBusName: !Ref UnicornWebEventBus
      EventPattern:
        account:
          - !Ref AWS::AccountId
        source:
          - !FindInMap [Constants, ServiceNamespace, Value]
      State: ENABLED #You may want to disable this rule in production
      Targets:
        - Arn: !GetAtt UnicornWebCatchAllLogGroup.Arn
          Id: !Sub UnicornContractsCatchAllLogGroupTarget-${Stage}

  # CloudWatch log group used to catch all events
  UnicornWebCatchAllLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub
        - "/aws/events/${Stage}/${NS}-catchall"
        - Stage: !Ref Stage
          NS: !FindInMap [Constants, ServiceNamespace, Value]
      RetentionInDays: 3

  # Permissions to allow EventBridge to send logs to CloudWatch
  # EventBridgeCloudWatchLogGroupPolicy:
  #   Type: AWS::Logs::ResourcePolicy
  #   Properties:
  #     PolicyName: !Sub EventBridgeToCWLogsPolicy-${Stage}
  #     # Note: PolicyDocument has to be established this way. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html#cfn-logs-resourcepolicy-policydocument
  #     PolicyDocument: !Sub
  #       - |
  #         {
  #           "Version": "2012-10-17",
  #           "Statement": [
  #             {
  #               "Effect": "Allow",
  #               "Principal": {
  #                 "Service": [
  #                   "delivery.logs.amazonaws.com",
  #                   "events.amazonaws.com"
  #                 ]
  #               },
  #               "Action": [
  #                 "logs:CreateLogStream",
  #                 "logs:PutLogEvents"
  #               ],
  #               "Resource": [
  #                 "${logGroup}"
  #               ]
  #             }
  #           ]
  #         }
  #       - { logGroup: UnicornWebCatchAllLogGroup.Arn }

  ##### DLQs
  UnicornWebEventBusDLQ:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      Tags:
        - Key: project
          Value: !FindInMap [Constants, ProjectName, Value]
        - Key: namespace
          Value: !FindInMap [Constants, ServiceNamespace, Value]
        - Key: stage
          Value: !Ref Stage

#### OUTPUTS
Outputs:
  ApiUrl:
    Description: Web service API endpoint
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/"

  BaseUrl:
    Description: Web service API endpoint
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"

  WebTableName:
    Description: Name of the DynamoDB Table for Unicorn Web
    Value: !Ref WebTable

  SearchPropertiesByCity:
    Description: "GET request to list all properties in a given city"
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/search/{country}/{city}"

  SearchPropertiesByStreet:
    Description: "GET request to list all properties in a given street"
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/search/{country}/{city}/{street}"

  PropertyApproval:
    Description: "POST request to add a property to the database"
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/request_approval"

  PropertyDetails:
    Description: "GET request to get the full details of a single property"
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/properties/{country}/{city}/{street}/{number}"

  IsProd:
    Description: Is Production?
    Value: !If
      - IsProd
      - "true"
      - "false"