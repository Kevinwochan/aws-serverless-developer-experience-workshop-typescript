# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Unicorn Contracts Service resources.

#### METADATA
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - I3042
        - ES1007

#### PARAMETERS
Parameters:
  Stage:
    Type: String
    Default: Local
    AllowedValues:
      - Local
      - Dev
      - Prod

  ContractsServiceNamespace:
    Type: String
    Default: "unicorn.contracts"
    AllowedValues:
      - "unicorn.contracts"

#### MAPPINGS
Mappings:
  LogsRetentionPeriodMap:
    Local:
      Days: 3
    Dev:
      Days: 3
    Prod:
      Days: 14


#### CONDITIONS
Conditions:
  IsProd: !Equals
    - !Ref Stage
    - Prod

#### GLOBALS
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: nodejs18.x
    MemorySize: 128
    Timeout: 60
    Tracing: Active
    Architectures:
      - x86_64
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref ContractsTable
        SERVICE_NAMESPACE: !Ref ContractsServiceNamespace
        POWERTOOLS_SERVICE_NAME: !Ref ContractsServiceNamespace
        POWERTOOLS_TRACE_DISABLED: "false"                                    # Explicitly disables tracing, default
        POWERTOOLS_LOGGER_LOG_EVENT: !If [ IsProd, "false", "true" ]            # Logs incoming event, default
        POWERTOOLS_LOGGER_SAMPLE_RATE: !If [ IsProd, "0.1", "0" ]               # Debug log sampling percentage, default
        POWERTOOLS_METRICS_NAMESPACE: !Ref ContractsServiceNamespace          # Metric Namespace
        LOG_LEVEL: INFO                                                       # Log level for Logger (INFO, DEBUG, etc.), default
    Tags:
      stage: !Ref Stage
      project: AWS Serverless Developer Experience
      namespace: !Ref ContractsServiceNamespace


Resources:
  
  #### SSM PARAMETERS
  # Services own and share their namespace
  UnicornContractsNamespace: 
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/UnicornContractsNamespace
      Value: !Ref ContractsServiceNamespace
      
  # Services share their event bus name and arn
  UnicornContractsEventBusName:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/UnicornContractsEventBus
      Value: !GetAtt UnicornContractsEventBus.Name
      
  UnicornContractsEventBusArn:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/UnicornContractsEventBusArn
      Value: !GetAtt UnicornContractsEventBus.Arn

  #### LAMBDA FUNCTIONS
  ContractEventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: contractEventHandler.lambdaHandler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ContractsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ContractsTable
      Events:
        IngestQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt ContractServiceIngestQueue.Arn
            BatchSize: 1
            Enabled: true
            ScalingConfig:
              MaximumConcurrency: 5
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
          - src/contracts_service/contractEventHandler.ts

  
  ContractEventHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ContractEventHandlerFunction}"
      RetentionInDays: !FindInMap
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days
  
  
  #### API GATEWAY REST API
  ContractsApi:
    Type: AWS::Serverless::Api
    DependsOn: ContractsApiGwAccountConfig
    Properties:
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      MethodSettings:
        - MetricsEnabled: true
          ResourcePath: /*
          HttpMethod: "*"
          LoggingLevel: !If
            - IsProd
            - ERROR
            - INFO
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 100
      AccessLogSetting:
        DestinationArn: !GetAtt ContractsApiLogGroup.Arn
        Format: >
          {"requestId":"$context.requestId",
          "integration-error":"$context.integration.error",
          "integration-status":"$context.integration.status",
          "integration-latency":"$context.integration.latency",
          "integration-requestId":"$context.integration.requestId",
          "integration-integrationStatus":"$context.integration.integrationStatus",
          "response-latency":"$context.responseLatency",
          "status":"$context.status"}
      DefinitionBody:
        "Fn::Transform":
          Name: 'AWS::Include'
          Parameters:
            Location: './api.yaml'
      Tags:
        stage: !Ref Stage
        project: AWS Serverless Developer Experience
        namespace: !Ref ContractsServiceNamespace
  
  ContractsApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ContractsApiGwAccountConfigRole.Arn
  
  # API GW Cloudwatch Log Group
  ContractsApiLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: !FindInMap
        - LogsRetentionPeriodMap
        - !Ref Stage
        - Days

  # API GW IAM roles 
  ContractsApiIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: apigateway.amazonaws.com
      Policies:
        - PolicyName: AllowSqsIntegration
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueUrl'
                Resource: !GetAtt ContractServiceIngestQueue.Arn
#              - Effect: Allow
#                Action:
#                  - 'logs:CreateLogGroup'
#                  - 'logs:CreateLogStream'
#                  - 'logs:DescribeLogGroups'
#                  - 'logs:DescribeLogStreams'
#                  - 'logs:PutLogEvents'
#                  - 'logs:GetLogEvents'
#                  - 'logs:FilterLogEvents'
#                Resource: !GetAtt ContractsApiLogGroup.Arn
                
  ContractsApiGwAccountConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
          
  #### INGEST QUEUES
  ContractServiceIngestQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      QueueName: !Sub ContractServiceIngestQueue-${Stage}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ContractServiceIngestDLQ.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 20
      Tags:
        - Key: stage
          Value: !Ref Stage
        - Key: project
          Value: AWS Serverless Developer Experience
        - Key: namespace
          Value: !Ref ContractsServiceNamespace
      
  ContractServiceIngestDLQ:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      QueueName: !Sub ContractServiceIngestDLQ-${Stage}
      Tags:
        - Key: stage
          Value: !Ref Stage
        - Key: project
          Value: AWS Serverless Developer Experience
        - Key: namespace
          Value: !Ref ContractsServiceNamespace
  
  #### DYNAMODB TABLE
  ContractsTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: PropertyId
          AttributeType: S
      KeySchema:
        - AttributeName: PropertyId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: project
          Value: AWS Serverless Developer Experience
        - Key: namespace
          Value: !Ref ContractsServiceNamespace
        - Key: stage
          Value: !Ref Stage
  
  #### EVENT BUS
  
  # Event bus for Contract Service used to publish and consume events
  UnicornContractsEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub UnicornContractsBus-${Stage}

  # Event bus policy to restrict who can publish events (should only be services from ContractsServiceNamespace)
  ContractEventsBusPublishPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref UnicornContractsEventBus
      StatementId: !Sub ContactsPublishEventsPolicy-${Stage}
      Statement:
        Effect: Allow
        Principal:
          AWS:
            - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
        Action: events:PutEvents
        Resource: !GetAtt UnicornContractsEventBus.Arn
        Condition:
          StringEquals:
            events:source:
              - !Ref ContractsServiceNamespace

  # Event bus policy to restrict who can create rules on the event bus to subscribe to events published by the Contracts Service.
  # Update this policy as you get new subscribers by adding their namespace to events:source
#  PropertiesServiceRulePolicy:
#    Type: "AWS::Events::EventBusPolicy"
#    Properties:
#      EventBusName: !Ref UnicornContractsEventBus
#      StatementId: !Sub CreateRulePolicy-${Stage}
#      Statement:
#        Effect: Allow
#        Principal:
#          AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
#        Action:
#          - "events:PutRule"
#          - "events:DeleteRule"
#          - "events:DescribeRule"
#          - "events:DisableRule"
#          - "events:EnableRule"
#          - "events:PutTargets"
#          - "events:RemoveTargets"
#        Resource:
#          - !Sub >-
#            arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${UnicornContractsEventBus.Name}/*
#        Condition:
#          StringEqualsIfExists:
#            "events:creatorAccount": "${aws:PrincipalAccount}"
#          StringEquals:
#            "events:source":
#              - !Sub "{{resolve:ssm:/UniProp/${Stage}/UnicornPropertiesNamespace}}"
#          "Null":
#            "events:source": "false"

  # Catchall rule used for development purposes.
  UnicornContractsCatchAllRule:
    Type: AWS::Events::Rule
    Properties:
      Name: contracts.catchall
      Description: Catch all events published by the contracts service.
      EventBusName: !Ref UnicornContractsEventBus
      EventPattern:
        account:
          - !Ref AWS::AccountId
        source:
          - !Ref ContractsServiceNamespace
      State: ENABLED #You may want to disable this rule in production
      Targets:
        - Arn: !GetAtt UnicornContractsCatchAllLogGroup.Arn
          Id: !Sub UnicornContractsCatchAllLogGroupTarget-${Stage}

  # CloudWatch log group used to catch all events
  UnicornContractsCatchAllLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/events/${Stage}/${ContractsServiceNamespace}-catchall
      RetentionInDays: 3

  # Permissions to allow EventBridge to send logs to CloudWatch
  EventBridgeCloudWatchLogGroupPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub EventBridgeToCWLogsPolicy-${Stage}
      # Note: PolicyDocument has to be established this way. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html#cfn-logs-resourcepolicy-policydocument
      PolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "delivery.logs.amazonaws.com",
                    "events.amazonaws.com"
                  ]
                },
                "Action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": [
                  "${contractsServiceLogGroup}"
                ]
              }
            ]
          }
        - {
          contractsServiceLogGroup: UnicornContractsCatchAllLogGroup.Arn,
        }



# OUTPUTS

Outputs:
  ApiUrl:
    Description: Contract service API endpoint
    Value: !Sub "https://${ContractsApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/"

  ContractsTableName:
    Description: DynamoDB table storing contract information
    Value: !Ref ContractsTable
  
  ContractEventHandlerFunction:
    Description: Create Contract function ARN
    Value: !GetAtt ContractEventHandlerFunction.Arn
  
  #  CreateContractFunction:
  #    Description: Create Contract function ARN
  #    Value: !GetAtt CreateContractFunction.Arn

  # UpdateContractFunction:
  #   Description: Update Contract function ARN
  #   Value: !GetAtt UpdateContractFunction.Arn

  IsProd:
    Description: Is Production?
    Value: !If
      - IsProd
      - 'true'
      - 'false'

  BaseUrl:
    Description: Web service API endpoint
    Value: !Sub "https://${ContractsApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"